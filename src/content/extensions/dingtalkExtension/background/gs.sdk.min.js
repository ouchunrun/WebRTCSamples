/**
 * create GsApi instance
 * @param host DUT host
 * @returns {GsApi|*}
 * @constructor
 */

class GsApi {
  constructor(config) {
    this.apiWebsocket = null
    this.ctiWebsocket = null
    this.lcdWebsocket = null
    this.extWebsocket = null
    this.gsCgi = new GsCgi(config)
    if (GsUtils.isNUllOrEmpty(config.wsUrl)) {
      this.wsUrl = config.url.replace(/http/i, 'ws') + '/websockify'
    } else {
      this.wsUrl = config.wsUrl
    }

    this.url = config.url
    this.cgiUrl = config.url + '/cgi-bin/'
    this.username = config.username
    this.password = config.password
    this.requestHeader = config.requestHeader
    if (this.gsCgi) {
      this.__proto__.__proto__ = this.gsCgi.__proto__
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      if (this.apiWebsocket) {
        this.apiWebsocket.updateCfg(config)
      }
      if (this.ctiWebsocket) {
        this.ctiWebsocket.updateCfg(config)
      }
      if (this.lcdWebsocket) {
        this.lcdWebsocket.updateCfg(config)
      }
      if (this.extWebsocket) {
        this.extWebsocket.updateCfg(config)
      }

      this.url = config.url
      this.cgiUrl = config.url + '/cgi-bin/'
      this.username = config.username
      this.password = config.password
      this.requestHeader = config.requestHeader
      this.gsCgi.updateCfg(config)
    }
  }

  createApiWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.apiWebsocket)) {
      let apiThis = this
      let config = {
        url: apiThis.wsUrl,
        user: apiThis.username,
        password: apiThis.password,
        protocols: ['gs-ws-api'],
        callback: callback
      }
      this.apiWebsocket = new WebSocketInstance(config)
    }
    return this.apiWebsocket
  }

  closeApiWebsocket() {
    if (this.apiWebsocket) {
      this.apiWebsocket.close()
    }
  }

  sendApiWebsocketData(data) {
    if (this.apiWebsocket) {
      this.apiWebsocket.send(data)
    }
  }

  createCTIWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.ctiWebsocket)) {
      let apiThis = this
      let config = {
        url: apiThis.wsUrl,
        user: apiThis.username,
        password: apiThis.password,
        protocols: ['gs-ws-cti'],
        callback: callback
      }
      this.ctiWebsocket = new WebSocketInstance(config)
    }
    return this.ctiWebsocket
  }

  closeCtiWebsocket() {
    if (this.ctiWebsocket) {
      this.ctiWebsocket.close()
    }
  }

  sendCtiWebsocketData(data) {
    if (this.ctiWebsocket) {
      this.ctiWebsocket.send(data)
    }
  }

  createLcdWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.lcdWebsocket)) {
      let apiThis = this
      let config = {
        url: apiThis.wsUrl,
        user: apiThis.username,
        password: apiThis.password,
        protocols: ['gs-ws-lcd'],
        callback: callback
      }
      this.lcdWebsocket = new WebSocketInstance(config)
    }
    return this.lcdWebsocket
  }

  closeLcdWebsocket() {
    if (this.lcdWebsocket) {
      this.lcdWebsocket.close()
    }
  }

  sendLcdWebsocketData(data) {
    if (this.lcdWebsocket) {
      this.lcdWebsocket.send(data)
    }
  }

  createExtWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.extWebsocket)) {
      let apiThis = this
      let config = {
        url: apiThis.wsUrl,
        user: apiThis.username,
        password: apiThis.password,
        protocols: ['gs-ws-ext'],
        callback: callback
      }
      this.extWebsocket = new WebSocketInstance(config)
    }
    return this.extWebsocket
  }

  closeExtWebsocket() {
    if (this.extWebsocket) {
      this.extWebsocket.close()
    }
  }

  sendExtWebsocketData(data) {
    if (this.extWebsocket) {
      this.extWebsocket.send(data)
    }
  }

  login(param) {
    let apiThis = this
    let accessParam = {}
    accessParam.onreturn = function (ret) {
      if (ret.readyState === 4 && ret.status == 200) {
        let dologinParam = {}
        dologinParam.token = JSON.parse(ret.responseText).body
        dologinParam.onreturn = function (ret) {
          if (ret.readyState === 4 && ret.status == 200) {
            apiThis.startKeepAlive()
          }

          if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
            param.onreturn(ret)
          }
        }
        apiThis.dologin(dologinParam)
      }
    }
    apiThis.access(accessParam)
  }
}

/**
 * create GsCgi instance
 * @param username web user name
 * @param password web user password.
 * @returns {GsCgi|*}
 * @constructor
 */

let apiList = {
  access: 'access',
  avahiStatus: 'api-get_avahi_status',
  bsXsiLogin: 'api-bs_xsi_login',
  bsXsiLogout: 'api-bs_xsi_logout',
  getCallHistories: 'callhistories',
  databaseClear: 'api-database_clear',
  databaseDownload: 'api-database_download',
  databaseGetStatus: 'api-database_get_status',
  databaseRecover: 'api-database_recover',
  delCallHistories: 'callhistories',
  captureScreen: 'api-capture_screen',
  // changeDefaultPwd: 'api-change_default_password',
  // changePwd: 'api-change_password',
  checkProcess: 'api-check_process_running',
  chooseUserfile: 'api-choose_user_file',
  configGet: 'config_get',
  configUpdate: 'config_update',
  delContact: 'api-delete_contact_json',
  delAllContact: 'api-delete_all_contact',
  saveContact: 'api-save_contact',
  del802Ca: 'delete_802ca',
  del802Cl: 'delete_802cl',
  // delAudMode: 'delete_aud_mode',
  // delAudVol: 'delete_aud_vol',
  delCa: 'delete_CA',
  delCert: 'delete_cert',
  delCoredumps: 'api-delete_core_dumps',
  delPcaps: 'api-delete_pcap_list',
  delScreens: 'api-delete_screens',
  delSshkey: 'delete_sshkey',
  delVPNCa: 'delete_vpnca',
  delVPNCert: 'delete_vpncert',
  delVPNKey: 'delete_vpnkey',
  getDialplan: 'dialplan',
  putDialplan: 'dialplan',
  delDialPlan: 'dialplan',
  // directLogin: 'direct-login',
  dologin: 'dologin',
  dologout: 'dologout',
  dorefresh: 'dorefresh',
  downloadCfg: 'download_cfg',
  downloadPcap: 'api-download_pcap',
  downloadUserConfig: 'download_user_config',
  downloadUserfile: 'api-download_user_file',
  forceReboot: 'api-forceReboot',
  getAudioPath: 'api-get_audiopath',
  getAudioVolume: 'api-get_audiovolume',
  getBarStatus: 'api-get_barstatus',
  getCallStatus: 'api-get_call_status',
  getConfStatus: 'api-get_conf_status',
  getDatabaseStatus: 'api-get_database_status',
  getDialInNum: 'api-get_dial_input_number',
  getDtmfInNum: 'api-get_dtmf_input_number',
  getDumpList: 'api-get_dump_list',
  getGuiStatus: 'api-get_gui_status',
  getHookStatus: 'api-get_hookstatus',
  getIconStatus: 'api-get_iconstatus',
  getLanguageOrder: 'api-get_language_order',
  getLedStatus: 'api-get_ledstatus',
  getLineStatus: 'api-get_line_status',
  getMessageStatus: 'api-get_message_status',
  getPacketStatus: 'api-get_packet_status',
  getPcapList: 'api-get_pcap_list',
  getPhoneStatus: 'api-get_phone_status',
  getPopupContent: 'api-get_popup_content',
  getRecordList: 'api-get_record_list',
  getRingtoneType: 'api-get_ringtone_type',
  getRtpStatus: 'api-get_rtp_status',
  getScreenData: 'api-get_screen_data',
  getScreenShot: 'api-get_screenshot',
  getSoftKey: 'api-get_softkey',
  getSystemStatus: 'api-get_system_status',
  getSystemTime: 'api-get_time',
  getUserSpaceInfo: 'api-get_user_space_info',
  addGroup: 'api-add_group_json',
  editDelGroup: 'api-edit_delete_group_json',
  hideruleCheck: 'api-hide_rule_check',
  hideruleResult: 'api-hide_rule_result',
  listAvailKeys: 'api-list_avail_keys',
  listAvailMpks: 'api-list_avail_mpks',
  listBsAccounts: 'api-list_bs_accounts',
  listCustomKeyModes: 'api-list_custom_key_modes',
  getListCustomKeys: 'api-list_custom_keys',
  postListCustomKeys: 'api-list_custom_keys',
  makeCall: 'api-make_call',
  mpkDownload: 'api-mpk_download',
  mpkSave: 'api-save_mpk',
  pcap: 'api-pcap',
  phonebookDownload: 'api-phonebook_download_json',
  phoneOperation: 'api-phone_operation',
  resetCallScreen: 'api-reset_call_screen',
  resetIdleScreen: 'api-reset_idle_screen',
  backIdle: 'api-back_idle',
  getRingtone: 'ringtone',
  postRingtone: 'ringtone',
  delRingtone: 'ringtone',
  sendInstantMsg: 'api-send_instant_message',
  sendExtKey: 'api-send_ext_key',
  sendKey: 'api-send_key',
  setKey: 'api-set_key',
  setTime: 'api-set_time',
  swapAccount: 'api-swap_account',
  sysOperation: 'api-sys_operation',
  // upload802CA: '',
  // upload802Cl: '',
  // uploadCA: '',
  // uploadCert: '',
  // uploadCfg: '',
  // uploadPhonebook: '',
  // uploadSshkey: '',
  // uploadUserFile: '',
  // uploadVPNCA: '',
  // uploadVPNCert: '',
  // uploadVPNKey: '',
  // uploadWallpaper: '',
  // addWifi: 'api-wifi_add',
  connectWifi: 'api-wifi_connect',
  forgetWifi: 'api-wifi_forget',
  startWifiScan: 'api-wifi_scan_start',
  stopWifiScan: 'api-wifi_scan_stop',
  getWifiStatus: 'api-wifi_status_get',
  willLogin: 'api-will_login',
  getAccounts: 'api-get_accounts'
}

let paramList = {
  access: ['access'],
  getCallHistories: ['type'],
  delCallHistories: ['id', 'type', 'all'],
  // changeDefaultPwd: ['curAdmPwd', 'newAdmPwd'],
  // changePwd: ['oldadmin', 'P2', 'P196'],
  checkProcess: ['request'],
  chooseUserfile: ['phonebook', 'callog', 'config', 'wallpaper', 'user_config'],
  configGet: ['pvalues'],
  delContact: ['contactId'],
  saveContact: ['contactId', 'firstName', 'lastName', 'favorite', 'company', 'department', 'job', 'jobTitle', 'workNum', 'homeNum', 'cellNum', 'account', 'groups', 'ringtone', 'primary', 'image', 'customLabelCount', 'stamp'],
  getDialplan: ['acctid'],
  delDialPlan: ['id'],
  dologin: ['username', 'password'],
  downloadCfg: ['type'],
  getSoftKey: ['isShow'],
  addGroup: ['groupName', 'ringtone'],
  editDelGroup: ['groupId', 'groupName', 'ringtone', 'account'],
  hideruleCheck: ['rule'],
  hideruleResult: ['rule', 'number'],
  listAvailKeys: ['type'],
  listAvailMpks: ['type'],
  listCustomKeyModes: ['type'],
  postListCustomKeys: ['list'],
  makeCall: ['phonenumber', 'account', 'display'],
  mpkDownload: ['type', 'page', 'status'],
  pcap: ['start', 'method', 'name', 'rtp', 'ssl'],
  phoneOperation: ['cmd', 'arg'],
  delRingtone: ['id'],
  sendInstantMsg: ['account', 'number', 'message'],
  sendExtKey: ['key'],
  sendKey: ['keys'],
  setKey: ['key', 'press'],
  setTime: ['date', 'dateStr', 'dateTime'],
  swapAccount: ['account1', 'account2'],
  sysOperation: ['request'],
  forgetWifi: ['ssid'],
  startWifiScan: ['auto'],
  getAccounts: ['registered']
}
class GsCgi {
  constructor(config) {
    if (GsUtils.isObject(config)) {
      this.url = config.url
      this.cgiUrl = config.url + '/cgi-bin/'
      this.username = config.username
      this.password = config.password
      this.requestHeader = config.requestHeader
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      this.url = config.url
      this.cgiUrl = config.url + '/cgi-bin/'
      this.username = config.username
      this.password = config.password
      this.requestHeader = config.requestHeader
    }
  }

  sendReq(sendParam) {
    if (GsUtils.isObject(sendParam) && GsUtils.isString(sendParam.api)) {
      let data = ''
      let param = sendParam.param
      let sendHeader = sendParam.header
      switch (sendParam.contentType) {
        case 'application/json':
          if (GsUtils.isObject(param) && GsUtils.isObject(param.body)) {
            data = JSON.stringify(param.body)
          }
          break
        default:
          let paramArray = paramList[sendParam.api]
          if (Array.isArray(paramArray) && paramArray.length !== 0) {

            for (var index in paramArray) {
              let item = paramArray[index]
              if (GsUtils.isObject(param) && !GsUtils.isNUllOrEmpty(param[item])) {
                if (data.length !== 0) {
                  data = data + '&'
                }
                data = data + item + '=' + param[item]
              }
            }
          }
          break
      }

      let url = this.cgiUrl + apiList[sendParam.api]

      switch (sendParam.method) {
        case 'GET':
          if (data) {
            url = this.cgiUrl + apiList[sendParam.api] + '?' + data
            data = ''
          }
          break
        default:
          break
      }

      let xmlhttp = new XMLHttpRequest()
      xmlhttp.onreadystatechange = function () {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(this)
        }
      }

      xmlhttp.onerror = function (event) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onerror)) {
          param.onerror(event)
        }
      }

      xmlhttp.open(sendParam.method || 'POST', url, true)
      xmlhttp.setRequestHeader('Content-type', sendParam.contentType || 'application/x-www-form-urlencoded')

      for (let itemHeader in this.requestHeader) {
        xmlhttp.setRequestHeader(itemHeader, this.requestHeader[itemHeader])
      }
      for (let itemHeader in sendHeader) {
        xmlhttp.setRequestHeader(itemHeader, sendHeader[itemHeader])
      }
      xmlhttp.send(data)
    }
  }

  access(param) {
    let cgiThis = this
    let hash = sha256.create()
    hash.update(cgiThis.username)

    let sendParam = {
      api: 'access',
      param: {
        access: hash.hex(),
        onreturn: function (ret) {
          if (ret.readyState === 4 && ret.status === 200) {
            cgiThis.token = JSON.parse(ret.responseText).body
          }
          if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
            param.onreturn(ret)
          }
        },
        onerror: param.onerror
      }
    }

    this.sendReq(sendParam)
  }

  avahiStatus(param) {
    let sendParam = {
      api: 'avahiStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  bsXsiLogin(param) {
    let sendParam = {
      api: 'bsXsiLogin',
      param: param
    }

    this.sendReq(sendParam)
  }

  bsXsiLogout(param) {
    let sendParam = {
      api: 'bsXsiLogout',
      param: param
    }

    this.sendReq(sendParam)
  }

  getCallHistories(param) {
    let sendParam = {
      method: 'GET',
      api: 'getCallHistories',
      param: param
    }

    this.sendReq(sendParam)
  }

  databaseClear(param) {
    let sendParam = {
      api: 'databaseClear',
      param: param
    }

    this.sendReq(sendParam)
  }

  databaseDownload(param) {
    let sendParam = {
      api: 'databaseDownload',
      param: param
    }

    this.sendReq(sendParam)
  }

  databaseGetStatus(param) {
    let sendParam = {
      api: 'databaseGetStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  databaseRecover(param) {
    let sendParam = {
      api: 'databaseRecover',
      param: param
    }

    this.sendReq(sendParam)
  }

  delCallHistories(param) {
    let sendParam = {
      method: 'DELETE',
      api: 'callhistories',
      param: param
    }

    this.sendReq(sendParam)
  }

  captureScreen(param) {
    let sendParam = {
      method: 'GET',
      api: 'captureScreen',
      param: param
    }

    this.sendReq(sendParam)
  }

  // changeDefaultPwd(param) {
  //   let sendParam = {
  //     method: 'GET',
  //     api: 'changeDefaultPwd',
  //     param: param
  //   }
  //   this.sendReq(sendParam)
  // }

  // changePwd(param) {
  //   let sendParam = {
  //     api: 'changeDefaultPwd',
  //     param: param
  //   }

  //   this.sendReq(sendParam)
  // }

  checkProcess(param) {
    let sendParam = {
      api: 'checkProcess',
      param: param
    }

    this.sendReq(sendParam)
  }

  chooseUserfile(param) {
    let sendParam = {
      api: 'chooseUserfile',
      param: param
    }

    this.sendReq(sendParam)
  }

  configGet(param) {
    let sendParam = {
      method: 'GET',
      api: 'configGet',
      param: param
    }

    this.sendReq(sendParam)
  }

  configUpdate(param) {
    let sendParam = {
      method: 'PUT',
      api: 'configUpdate',
      contentType: 'application/json',
      param: param
    }

    this.sendReq(sendParam)
  }

  delContact(param) {
    let sendParam = {
      api: 'delContact',
      param: param
    }

    this.sendReq(sendParam)
  }

  delAllContact(param) {
    let sendParam = {
      api: 'delAllContact',
      param: param
    }

    this.sendReq(sendParam)
  }

  saveContact(param) {
    let sendParam = {
      api: 'saveContact',
      param: param
    }

    this.sendReq(sendParam)
  }

  del802Ca(param) {
    let sendParam = {
      api: 'del802Ca',
      param: param
    }

    this.sendReq(sendParam)
  }

  del802Cl(param) {
    let sendParam = {
      api: 'del802Cl',
      param: param
    }

    this.sendReq(sendParam)
  }

  // delAudMode(param) {
  //   let sendParam = {
  //     api: 'delAudMode',
  //     param: param
  //   }

  //   this.sendReq(sendParam)
  // }

  // delAudVol(param) {
  //   let sendParam = {
  //     api: 'delAudVol',
  //     param: param
  //   }

  //   this.sendReq(sendParam)
  // }

  delCa(param) {
    let sendParam = {
      api: 'delCa',
      contentType: 'application/json',
      param: param
    }

    this.sendReq(sendParam)
  }

  delCert(param) {
    let sendParam = {
      api: 'delCert',
      param: param
    }

    this.sendReq(sendParam)
  }

  delCoredumps(param) {
    let sendParam = {
      api: 'delCoredumps',
      param: param
    }

    this.sendReq(sendParam)
  }

  delPcaps(param) {
    let sendParam = {
      api: 'delPcaps',
      param: param
    }

    this.sendReq(sendParam)
  }

  delScreens(param) {
    let sendParam = {
      api: 'delScreens',
      param: param
    }

    this.sendReq(sendParam)
  }

  delSshkey(param) {
    let sendParam = {
      api: 'delSshkey',
      param: param
    }

    this.sendReq(sendParam)
  }

  delVPNCa(param) {
    let sendParam = {
      api: 'delVPNCa',
      param: param
    }

    this.sendReq(sendParam)
  }

  delVPNCert(param) {
    let sendParam = {
      api: 'delVPNCert',
      param: param
    }

    this.sendReq(sendParam)
  }

  delVPNKey(param) {
    let sendParam = {
      api: 'delVPNKey',
      param: param
    }

    this.sendReq(sendParam)
  }

  getDialplan(param) {
    let sendParam = {
      method: 'GET',
      api: 'getDialplan',
      param: param
    }

    this.sendReq(sendParam)
  }

  putDialplan(param) {
    let sendParam = {
      method: 'PUT',
      api: 'putDialplan',
      contentType: 'application/json',
      param: param
    }

    this.sendReq(sendParam)
  }

  delDialPlan(param) {
    let sendParam = {
      method: 'DELETE',
      api: 'delDialPlan',
      param: param
    }

    this.sendReq(sendParam)
  }

  // directLogin(param) {
  //   // TODO:
  // }

  dologin(param) {
    let cgiThis = this
    let hash = sha256.create()
    hash.update(cgiThis.password + param.token)

    let sendParam = {
      api: 'dologin',
      param: {
        username: cgiThis.username,
        password: hash.hex(),
        onreturn: function (ret) {
          if (ret.readyState === 4 && ret.status === 200) {
            let resp = JSON.parse(ret.responseText)
            if (resp.response === 'success') {
              console.log('login success.')
              cgiThis.sid = resp.body.sid
              document.cookie = 'sid=' + cgiThis.sid
              localStorage.setItem('sid', cgiThis.sid)
            }
          }

          if (GsUtils.isFunction(param.onreturn)) {
            param.onreturn(ret)
          }
        },
        onerror: param.onerror
      }
    }

    this.sendReq(sendParam)
  }

  dologout(param) {
    let sendParam = {
      api: 'dologout',
      param: param
    }

    this.sendReq(sendParam)
  }

  dorefresh(param) {
    let sendParam = {
      api: 'dorefresh',
      param: param
    }

    this.sendReq(sendParam)
  }

  downloadCfg(param) {
    let sendParam = {
      method: 'GET',
      api: 'downloadCfg',
      param: param
    }

    this.sendReq(sendParam)
  }

  downloadPcap(param) {
    let sendParam = {
      method: 'GET',
      api: 'downloadPcap',
      param: param
    }

    this.sendReq(sendParam)
  }

  downloadUserConfig(param) {
    let sendParam = {
      method: 'GET',
      api: 'downloadUserConfig',
      param: param
    }

    this.sendReq(sendParam)
  }

  downloadUserfile(param) {
    let sendParam = {
      method: 'GET',
      api: 'downloadUserfile',
      param: param
    }

    this.sendReq(sendParam)
  }

  forceReboot(param) {
    let sendParam = {
      api: 'forceReboot',
      param: param
    }

    this.sendReq(sendParam)
  }

  getAudioPath(param) {
    let sendParam = {
      api: 'getAudioPath',
      param: param
    }

    this.sendReq(sendParam)
  }

  getAudioVolume(param) {
    let sendParam = {
      api: 'getAudioVolume',
      param: param
    }

    this.sendReq(sendParam)
  }

  getBarStatus(param) {
    let sendParam = {
      api: 'getBarStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getCallStatus(param) {
    let sendParam = {
      api: 'getCallStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getConfStatus(param) {
    let sendParam = {
      api: 'getConfStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getDatabaseStatus(param) {
    let sendParam = {
      api: 'getDatabaseStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getDialInNum(param) {
    let sendParam = {
      api: 'getDialInNum',
      param: param
    }

    this.sendReq(sendParam)
  }

  getDtmfInNum(param) {
    let sendParam = {
      api: 'getDtmfInNum',
      param: param
    }

    this.sendReq(sendParam)
  }

  getDumpList(param) {
    let sendParam = {
      api: 'getDumpList',
      param: param
    }

    this.sendReq(sendParam)
  }

  getGuiStatus(param) {
    let sendParam = {
      api: 'getGuiStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getHookStatus(param) {
    let sendParam = {
      api: 'getHookStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getIconStatus(param) {
    let sendParam = {
      api: 'getIconStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getLanguageOrder(param) {
    let sendParam = {
      api: 'getLanguageOrder',
      param: param
    }

    this.sendReq(sendParam)
  }

  getLedStatus(param) {
    let sendParam = {
      api: 'getLedStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getLineStatus(param) {
    let sendParam = {
      api: 'getLineStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getMessageStatus(param) {
    let sendParam = {
      api: 'getMessageStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getPacketStatus(param) {
    let sendParam = {
      api: 'getPacketStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getPcapList(param) {
    let sendParam = {
      api: 'getPcapList',
      param: param
    }

    this.sendReq(sendParam)
  }

  getPhoneStatus(param) {
    let sendParam = {
      api: 'getPhoneStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getPopupContent(param) {
    let sendParam = {
      api: 'getPopupContent',
      param: param
    }

    this.sendReq(sendParam)
  }

  getRecordList(param) {
    let sendParam = {
      api: 'getRecordList',
      param: param
    }

    this.sendReq(sendParam)
  }

  getRingtoneType(param) {
    let sendParam = {
      api: 'getRingtoneType',
      param: param
    }

    this.sendReq(sendParam)
  }

  getRtpStatus(param) {
    let sendParam = {
      api: 'getRtpStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getScreenData(param) {
    let sendParam = {
      api: 'getScreenData',
      param: param
    }

    this.sendReq(sendParam)
  }

  getScreenShot(param) {
    let sendParam = {
      api: 'getScreenShot',
      param: param
    }

    this.sendReq(sendParam)
  }

  getSoftKey(param) {
    let sendParam = {
      api: 'getSoftKey',
      param: param
    }

    this.sendReq(sendParam)
  }

  getSystemStatus(param) {
    let sendParam = {
      api: 'getSystemStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  getSystemTime(param) {
    let sendParam = {
      api: 'getSystemTime',
      param: param
    }

    this.sendReq(sendParam)
  }

  getUserSpaceInfo(param) {
    let sendParam = {
      api: 'getUserSpaceInfo',
      param: param
    }

    this.sendReq(sendParam)
  }

  addGroup(param) {
    let sendParam = {
      api: 'addGroup',
      param: param
    }

    this.sendReq(sendParam)
  }

  editDelGroup(param) {
    let sendParam = {
      api: 'editDelGroup',
      param: param
    }

    this.sendReq(sendParam)
  }

  hideruleCheck(param) {
    let sendParam = {
      api: 'hideruleCheck',
      param: param
    }

    this.sendReq(sendParam)
  }

  hideruleResult(param) {
    let sendParam = {
      api: 'hideruleResult',
      param: param
    }

    this.sendReq(sendParam)
  }

  listAvailKeys(param) {
    let sendParam = {
      api: 'listAvailKeys',
      param: param
    }

    this.sendReq(sendParam)
  }

  listAvailMpks(param) {
    let sendParam = {
      api: 'listAvailMpks',
      param: param
    }

    this.sendReq(sendParam)
  }

  listBsAccounts(param) {
    let sendParam = {
      api: 'listBsAccounts',
      param: param
    }

    this.sendReq(sendParam)
  }

  listCustomKeyModes(param) {
    let sendParam = {
      api: 'listCustomKeyModes',
      param: param
    }

    this.sendReq(sendParam)
  }

  getListCustomKeys(param) {
    let sendParam = {
      method: 'GET',
      api: 'getListCustomKeys',
      param: param
    }

    this.sendReq(sendParam)
  }

  postListCustomKeys(param) {
    let sendParam = {
      api: 'postListCustomKeys',
      param: param
    }

    this.sendReq(sendParam)
  }

  makeCall(param) {
    let sendParam = {
      api: 'makeCall',
      param: param
    }

    this.sendReq(sendParam)
  }

  mpkDownload(param) {
    let sendParam = {
      api: 'mpkDownload',
      param: param
    }

    this.sendReq(sendParam)
  }

  mpkSave(param) {
    let sendParam = {
      api: 'mpkSave',
      contentType: 'application/json',
      param: param
    }

    this.sendReq(sendParam)
  }

  pcap(param) {
    let sendParam = {
      api: 'pcap',
      param: param
    }

    this.sendReq(sendParam)
  }

  phonebookDownload(param) {
    let sendParam = {
      api: 'phonebookDownload',
      param: param
    }

    this.sendReq(sendParam)
  }

  phoneOperation(param) {
    let sendParam = {
      api: 'phoneOperation',
      param: param
    }

    this.sendReq(sendParam)
  }

  resetCallScreen(param) {
    let sendParam = {
      api: 'resetCallScreen',
      param: param
    }

    this.sendReq(sendParam)
  }

  resetIdleScreen(param) {
    let sendParam = {
      api: 'resetIdleScreen',
      param: param
    }

    this.sendReq(sendParam)
  }

  backIdle(param) {
    let sendParam = {
      api: 'backIdle',
      param: param
    }

    this.sendReq(sendParam)
  }

  getRingtone(param) {
    let sendParam = {
      method: 'GET',
      api: 'getRingtone',
      param: param
    }

    this.sendReq(sendParam)
  }

  postRingtone(param) {
    // TODO:
  }

  delRingtone(param) {
    let sendParam = {
      method: 'DELETE',
      api: 'delRingtone',
      param: param
    }

    this.sendReq(sendParam)
  }

  sendInstantMsg(param) {
    let sendParam = {
      api: 'sendInstantMsg',
      param: param
    }

    this.sendReq(sendParam)
  }

  sendExtKey(param) {
    let sendParam = {
      api: 'sendExtKey',
      param: param
    }

    this.sendReq(sendParam)
  }

  sendKey(param) {
    let sendParam = {
      api: 'sendKey',
      param: param
    }

    this.sendReq(sendParam)
  }

  setKey(param) {
    let sendParam = {
      api: 'setKey',
      param: param
    }

    this.sendReq(sendParam)
  }

  setTime(param) {
    let sendParam = {
      api: 'setTime',
      param: param
    }

    this.sendReq(sendParam)
  }

  swapAccount(param) {
    let sendParam = {
      api: 'swapAccount',
      param: param
    }

    this.sendReq(sendParam)
  }

  sysOperation(param) {
    let sendParam = {
      api: 'sysOperation',
      param: param
    }

    this.sendReq(sendParam)
  }

  // upload802CA(param) {
  //   // TODO:
  // }

  // upload802Cl(param) {
  //   // TODO:
  // }

  // uploadCA(param) {
  //   // TODO:
  // }

  // uploadCert(param) {
  //   // TODO:
  // }

  // uploadCfg(param) {
  //   // TODO:
  // }

  // uploadPhonebook(param) {
  //   // TODO:
  // }

  // uploadSshkey(param) {
  //   // TODO:
  // }

  // uploadUserFile(param) {
  //   // TODO:
  // }

  // uploadVPNCA(param) {
  //   // TODO:
  // }

  // uploadVPNCert(param) {
  //   // TODO:
  // }

  // uploadVPNKey(param) {
  //   // TODO:
  // }

  // uploadWallpaper(param) {
  //   // TODO:
  // }

  // addWifi(param) {
  //   let sendParam = {
  //     api: 'addWifi',
  //     contentType: 'application/json',
  //     param: param
  //   }

  //   this.sendReq(sendParam)
  // }

  connectWifi(param) {
    let sendParam = {
      api: 'connectWifi',
      contentType: 'application/json',
      param: param
    }

    this.sendReq(sendParam)
  }

  forgetWifi(param) {
    let sendParam = {
      api: 'forgetWifi',
      param: param
    }

    this.sendReq(sendParam)
  }

  startWifiScan(param) {
    let sendParam = {
      api: 'startWifiScan',
      param: param
    }

    this.sendReq(sendParam)
  }

  stopWifiScan(param) {
    let sendParam = {
      api: 'stopWifiScan',
      param: param
    }

    this.sendReq(sendParam)
  }

  getWifiStatus(param) {
    let sendParam = {
      api: 'getWifiStatus',
      param: param
    }

    this.sendReq(sendParam)
  }

  willLogin(param) {
    let sendParam = {
      api: 'willLogin',
      param: param
    }

    this.sendReq(sendParam)
  }

  getAccounts(param) {
    let sendParam = {
      api: 'getAccounts',
      param: param
    }

    this.sendReq(sendParam)
  }


  startKeepAlive() {
    let cgiThis = this
    cgiThis.keepAliveInterval = setInterval(function () {
      cgiThis.willLogin()
    }, 5000)
  }

  stopKeepAlive() {
    if (this.keepAliveInterval) {
      clearInterval(this.keepAliveInterval)
      this.keepAliveInterval = null
    }
  }
}

/**
 * utils class.
 */

class GsUtils {
  static isNUllOrEmpty(str) {
    if (typeof (str) === 'undefined' || str === null || str === '') {
      return true
    } else {
      return false
    }
  }

  static isFunction(func) {
    if (typeof (func) === 'function') {
      return true
    } else {
      return false
    }
  }

  static isString(str) {
    if (typeof (str) === 'string' && str !== '') {
      return true
    } else {
      return false
    }
  }

  static isObject(obj) {
    if (typeof (obj) === 'object' && obj !== null) {
      return true
    } else {
      return false
    }
  }
}

/**
 * create websocket instance
 * @param url connection url.
 * @param protocols sub protocols.
 * @returns {WebSocket|*}
 * @constructor
 */

class WebSocketInstance {
  constructor(config) {
    if (GsUtils.isObject(config)) {
      this.config = config
      this.ws = this.createWebSocket()
    } else {
      this.ws = null
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      this.config.user = config.username
      this.config.password = config.password
    }
  }

  createWebSocket() {
    let wsConfig = this.config
    if (GsUtils.isObject(wsConfig)) {
      if (GsUtils.isNUllOrEmpty(wsConfig.url)) {
        throw new Error('ERR_INVALID_PARAMETER_VALUE: "' + url + '" is not valid as webSocket url value')
      }

      let ws = new WebSocket(wsConfig.url, wsConfig.protocols)

      window.onunload = window.onbeforeunload = function () {
        let sendData = JSON.stringify({
          'closeWs': true
        })
        ws.send(sendData)
      }

      let callback = wsConfig.callback

      ws.onopen = function (event) {
        let sendData = JSON.stringify({
          'challenge': true
        })

        ws.send(sendData)

        if (GsUtils.isFunction(callback.onopen)) {
          callback.onopen(event)
        }
      }

      ws.onerror = function (event) {
        if (GsUtils.isFunction(callback.onerror)) {
          callback.onerror(event)
        }
        ws = null
      }

      ws.onmessage = function (event) {
        if (typeof (event.data) === 'string' && event.data === '\r\n\r\n') {
          ws.keepAliveWithoutResp = 0
        } else if (event.data) {
          let retData = JSON.parse(event.data)
          if (retData.challenge) {
            let hash = sha256.create()
            hash.update(wsConfig.password + retData.challenge)

            let sendData = JSON.stringify({
              'user': wsConfig.user,
              'token': hash.hex()
            })

            ws.send(sendData)
            ws.keepAliveWithoutResp = 0
            if (!ws.keepAliveInterval) {
              ws.keepAlive()
            }
          } else if (GsUtils.isFunction(callback.onmessage)) {
            callback.onmessage(event)
          }
        }
      }

      ws.onclose = function (event) {
        if (ws.keepAliveInterval) {
          clearInterval(ws.keepAliveInterval)
          ws.keepAliveInterval = null
        }

        if (GsUtils.isFunction(callback.onclose)) {
          callback.onclose(event)
        }
        ws = null
      }

      ws.keepAlive = function () {
        ws.keepAliveInterval = setInterval(function () {
          if (ws.keepAliveWithoutResp >= 5) {
            ws.close()
            return
          } else {
            let message = '\r\n'
            ws.send(message)
            this.keepAliveWithoutResp += 1
          }
        }, 5000)
      }

      return ws
    } else {
      return null
    }
  }

  close() {
    if (GsUtils.isNUllOrEmpty(this.ws)) {
      console.error('the websocket is null')
    } else {
      this.ws.close()
    }
  }

  send(data) {
    if (GsUtils.isNUllOrEmpty(this.ws)) {
      console.error('the websocket is null')
    } else {
      this.ws.send(data)
    }
  }
}

/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
 !function(){"use strict";function t(t,i){i?(d[0]=d[16]=d[1]=d[2]=d[3]=d[4]=d[5]=d[6]=d[7]=d[8]=d[9]=d[10]=d[11]=d[12]=d[13]=d[14]=d[15]=0,this.blocks=d):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=t}function i(i,r,s){var e,n=typeof i;if("string"===n){var o,a=[],u=i.length,c=0;for(e=0;e<u;++e)(o=i.charCodeAt(e))<128?a[c++]=o:o<2048?(a[c++]=192|o>>6,a[c++]=128|63&o):o<55296||o>=57344?(a[c++]=224|o>>12,a[c++]=128|o>>6&63,a[c++]=128|63&o):(o=65536+((1023&o)<<10|1023&i.charCodeAt(++e)),a[c++]=240|o>>18,a[c++]=128|o>>12&63,a[c++]=128|o>>6&63,a[c++]=128|63&o);i=a}else{if("object"!==n)throw new Error(h);if(null===i)throw new Error(h);if(f&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!(Array.isArray(i)||f&&ArrayBuffer.isView(i)))throw new Error(h)}i.length>64&&(i=new t(r,!0).update(i).array());var y=[],p=[];for(e=0;e<64;++e){var l=i[e]||0;y[e]=92^l,p[e]=54^l}t.call(this,r,s),this.update(p),this.oKeyPad=y,this.inner=!0,this.sharedMemory=s}var h="input is invalid type",r="object"==typeof window,s=r?window:{};s.JS_SHA256_NO_WINDOW&&(r=!1);var e=!r&&"object"==typeof self,n=!s.JS_SHA256_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;n?s=global:e&&(s=self);var o=!s.JS_SHA256_NO_COMMON_JS&&"object"==typeof module&&module.exports,a="function"==typeof define&&define.amd,f=!s.JS_SHA256_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,u="0123456789abcdef".split(""),c=[-2147483648,8388608,32768,128],y=[24,16,8,0],p=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],l=["hex","array","digest","arrayBuffer"],d=[];!s.JS_SHA256_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!f||!s.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});var A=function(i,h){return function(r){return new t(h,!0).update(r)[i]()}},w=function(i){var h=A("hex",i);n&&(h=b(h,i)),h.create=function(){return new t(i)},h.update=function(t){return h.create().update(t)};for(var r=0;r<l.length;++r){var s=l[r];h[s]=A(s,i)}return h},b=function(t,i){var r=eval("require('crypto')"),s=eval("require('buffer').Buffer"),e=i?"sha224":"sha256",n=function(i){if("string"==typeof i)return r.createHash(e).update(i,"utf8").digest("hex");if(null===i||void 0===i)throw new Error(h);return i.constructor===ArrayBuffer&&(i=new Uint8Array(i)),Array.isArray(i)||ArrayBuffer.isView(i)||i.constructor===s?r.createHash(e).update(new s(i)).digest("hex"):t(i)};return n},v=function(t,h){return function(r,s){return new i(r,h,!0).update(s)[t]()}},_=function(t){var h=v("hex",t);h.create=function(h){return new i(h,t)},h.update=function(t,i){return h.create(t).update(i)};for(var r=0;r<l.length;++r){var s=l[r];h[s]=v(s,t)}return h};t.prototype.update=function(t){if(!this.finalized){var i,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(h);if(null===t)throw new Error(h);if(f&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||f&&ArrayBuffer.isView(t)))throw new Error(h);i=!0}for(var s,e,n=0,o=t.length,a=this.blocks;n<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),i)for(e=this.start;n<o&&e<64;++n)a[e>>2]|=t[n]<<y[3&e++];else for(e=this.start;n<o&&e<64;++n)(s=t.charCodeAt(n))<128?a[e>>2]|=s<<y[3&e++]:s<2048?(a[e>>2]|=(192|s>>6)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]):s<55296||s>=57344?(a[e>>2]|=(224|s>>12)<<y[3&e++],a[e>>2]|=(128|s>>6&63)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]):(s=65536+((1023&s)<<10|1023&t.charCodeAt(++n)),a[e>>2]|=(240|s>>18)<<y[3&e++],a[e>>2]|=(128|s>>12&63)<<y[3&e++],a[e>>2]|=(128|s>>6&63)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]);this.lastByteIndex=e,this.bytes+=e-this.start,e>=64?(this.block=a[16],this.start=e-64,this.hash(),this.hashed=!0):this.start=e}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},t.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,i=this.lastByteIndex;t[16]=this.block,t[i>>2]|=c[3&i],this.block=t[16],i>=56&&(this.hashed||this.hash(),t[0]=this.block,t[16]=t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=t[7]=t[8]=t[9]=t[10]=t[11]=t[12]=t[13]=t[14]=t[15]=0),t[14]=this.hBytes<<3|this.bytes>>>29,t[15]=this.bytes<<3,this.hash()}},t.prototype.hash=function(){var t,i,h,r,s,e,n,o,a,f=this.h0,u=this.h1,c=this.h2,y=this.h3,l=this.h4,d=this.h5,A=this.h6,w=this.h7,b=this.blocks;for(t=16;t<64;++t)i=((s=b[t-15])>>>7|s<<25)^(s>>>18|s<<14)^s>>>3,h=((s=b[t-2])>>>17|s<<15)^(s>>>19|s<<13)^s>>>10,b[t]=b[t-16]+i+b[t-7]+h<<0;for(a=u&c,t=0;t<64;t+=4)this.first?(this.is224?(e=300032,w=(s=b[0]-1413257819)-150054599<<0,y=s+24177077<<0):(e=704751109,w=(s=b[0]-210244248)-1521486534<<0,y=s+143694565<<0),this.first=!1):(i=(f>>>2|f<<30)^(f>>>13|f<<19)^(f>>>22|f<<10),r=(e=f&u)^f&c^a,w=y+(s=w+(h=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+(l&d^~l&A)+p[t]+b[t])<<0,y=s+(i+r)<<0),i=(y>>>2|y<<30)^(y>>>13|y<<19)^(y>>>22|y<<10),r=(n=y&f)^y&u^e,A=c+(s=A+(h=(w>>>6|w<<26)^(w>>>11|w<<21)^(w>>>25|w<<7))+(w&l^~w&d)+p[t+1]+b[t+1])<<0,i=((c=s+(i+r)<<0)>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10),r=(o=c&y)^c&f^n,d=u+(s=d+(h=(A>>>6|A<<26)^(A>>>11|A<<21)^(A>>>25|A<<7))+(A&w^~A&l)+p[t+2]+b[t+2])<<0,i=((u=s+(i+r)<<0)>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10),r=(a=u&c)^u&y^o,l=f+(s=l+(h=(d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7))+(d&A^~d&w)+p[t+3]+b[t+3])<<0,f=s+(i+r)<<0;this.h0=this.h0+f<<0,this.h1=this.h1+u<<0,this.h2=this.h2+c<<0,this.h3=this.h3+y<<0,this.h4=this.h4+l<<0,this.h5=this.h5+d<<0,this.h6=this.h6+A<<0,this.h7=this.h7+w<<0},t.prototype.hex=function(){this.finalize();var t=this.h0,i=this.h1,h=this.h2,r=this.h3,s=this.h4,e=this.h5,n=this.h6,o=this.h7,a=u[t>>28&15]+u[t>>24&15]+u[t>>20&15]+u[t>>16&15]+u[t>>12&15]+u[t>>8&15]+u[t>>4&15]+u[15&t]+u[i>>28&15]+u[i>>24&15]+u[i>>20&15]+u[i>>16&15]+u[i>>12&15]+u[i>>8&15]+u[i>>4&15]+u[15&i]+u[h>>28&15]+u[h>>24&15]+u[h>>20&15]+u[h>>16&15]+u[h>>12&15]+u[h>>8&15]+u[h>>4&15]+u[15&h]+u[r>>28&15]+u[r>>24&15]+u[r>>20&15]+u[r>>16&15]+u[r>>12&15]+u[r>>8&15]+u[r>>4&15]+u[15&r]+u[s>>28&15]+u[s>>24&15]+u[s>>20&15]+u[s>>16&15]+u[s>>12&15]+u[s>>8&15]+u[s>>4&15]+u[15&s]+u[e>>28&15]+u[e>>24&15]+u[e>>20&15]+u[e>>16&15]+u[e>>12&15]+u[e>>8&15]+u[e>>4&15]+u[15&e]+u[n>>28&15]+u[n>>24&15]+u[n>>20&15]+u[n>>16&15]+u[n>>12&15]+u[n>>8&15]+u[n>>4&15]+u[15&n];return this.is224||(a+=u[o>>28&15]+u[o>>24&15]+u[o>>20&15]+u[o>>16&15]+u[o>>12&15]+u[o>>8&15]+u[o>>4&15]+u[15&o]),a},t.prototype.toString=t.prototype.hex,t.prototype.digest=function(){this.finalize();var t=this.h0,i=this.h1,h=this.h2,r=this.h3,s=this.h4,e=this.h5,n=this.h6,o=this.h7,a=[t>>24&255,t>>16&255,t>>8&255,255&t,i>>24&255,i>>16&255,i>>8&255,255&i,h>>24&255,h>>16&255,h>>8&255,255&h,r>>24&255,r>>16&255,r>>8&255,255&r,s>>24&255,s>>16&255,s>>8&255,255&s,e>>24&255,e>>16&255,e>>8&255,255&e,n>>24&255,n>>16&255,n>>8&255,255&n];return this.is224||a.push(o>>24&255,o>>16&255,o>>8&255,255&o),a},t.prototype.array=t.prototype.digest,t.prototype.arrayBuffer=function(){this.finalize();var t=new ArrayBuffer(this.is224?28:32),i=new DataView(t);return i.setUint32(0,this.h0),i.setUint32(4,this.h1),i.setUint32(8,this.h2),i.setUint32(12,this.h3),i.setUint32(16,this.h4),i.setUint32(20,this.h5),i.setUint32(24,this.h6),this.is224||i.setUint32(28,this.h7),t},i.prototype=new t,i.prototype.finalize=function(){if(t.prototype.finalize.call(this),this.inner){this.inner=!1;var i=this.array();t.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(i),t.prototype.finalize.call(this)}};var B=w();B.sha256=B,B.sha224=w(!0),B.sha256.hmac=_(),B.sha224.hmac=_(!0),o?module.exports=B:(s.sha256=B.sha256,s.sha224=B.sha224,a&&define(function(){return B}))}();
