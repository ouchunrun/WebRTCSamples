/**
 * create GsApi instance
 * @param host DUT host
 * @returns {GsApi|*}
 * @constructor
 */

class GsApi {
  constructor(config) {
    this.config = config
    this.apiWebsocket = null
    this.ctiWebsocket = null
    this.lcdWebsocket = null
    this.extWebsocket = null
    this.gsCgi = new GsCgi(this.config)
    if (GsUtils.isNUllOrEmpty(config.wsUrl)) {
      this.wsUrl = config.url.replace(/http/i, 'ws') + '/websockify'
    } else {
      this.wsUrl = config.wsUrl
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      if (!GsUtils.isNUllOrEmpty(this.gsCgi)) {
        this.gsCgi.updateCfg(config)
      }
      if (!GsUtils.isNUllOrEmpty(this.apiWebsocket)) {
        this.apiWebsocket.updateCfg(config)
      }
      if (!GsUtils.isNUllOrEmpty(this.ctiWebsocket)) {
        this.ctiWebsocket.updateCfg(config)
      }
      if (!GsUtils.isNUllOrEmpty(this.lcdWebsocket)) {
        this.lcdWebsocket.updateCfg(config)
      }
      if (!GsUtils.isNUllOrEmpty(this.extWebsocket)) {
        this.extWebsocket.updateCfg(config)
      }
    }
  }

  createApiWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.apiWebsocket)) {
      let apiThis = this
      let config = {}
      config.url = apiThis.wsUrl
      config.user = this.config.username
      config.password = this.config.password
      config.protocols = ['gs-ws-api']
      if (GsUtils.isObject(callback)) {
        config.onopen = function (event) {
          if (GsUtils.isFunction(callback.onopen)) {
            callback.onopen(event)
          }
        }

        config.onerror = function (event) {
          apiThis.apiWebsocket = null

          if (GsUtils.isFunction(callback.onerror)) {
            callback.onerror(event)
          }
        }

        config.onmessage = function (event) {
          if (GsUtils.isFunction(callback.onmessage)) {
            callback.onmessage(event)
          }
        }

        config.onclose = function (event) {
          apiThis.apiWebsocket = null

          if (GsUtils.isFunction(callback.onclose)) {
            callback.onclose(event)
          }
        }
      }
      this.apiWebsocket = new WebSocketInstance(config)
    }
    return this.apiWebsocket
  }

  closeApiWebsocket() {
    if (!GsUtils.isNUllOrEmpty(this.apiWebsocket)) {
      this.apiWebsocket.close()
    }
  }

  sendApiWebsocketData(data) {
    if (GsUtils.isNUllOrEmpty(this.apiWebsocket)) {
      console.error('api websocket was not create.')
    } else {
      this.apiWebsocket.send(data)
    }
  }

  createCTIWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.ctiWebsocket)) {
      let apiThis = this
      let config = {}
      config.url = apiThis.wsUrl
      config.user = this.config.username
      config.password = this.config.password
      config.protocols = ['gs-ws-cti']
      if (GsUtils.isObject(callback)) {
        config.onopen = function (event) {
          if (GsUtils.isFunction(callback.onopen)) {
            callback.onopen(event)
          }
        }

        config.onerror = function (event) {
          apiThis.ctiWebsocket = null

          if (GsUtils.isFunction(callback.onerror)) {
            callback.onerror(event)
          }
        }

        config.onmessage = function (event) {
          if (GsUtils.isFunction(callback.onmessage)) {
            callback.onmessage(event)
          }
        }

        config.onclose = function (event) {
          apiThis.ctiWebsocket = null

          if (GsUtils.isFunction(callback.onclose)) {
            callback.onclose(event)
          }
        }
      }
      this.ctiWebsocket = new WebSocketInstance(config)
    }
    return this.ctiWebsocket
  }

  closeCtiWebsocket() {
    if (!GsUtils.isNUllOrEmpty(this.ctiWebsocket)) {
      this.ctiWebsocket.close()
    }
  }

  sendCtiWebsocketData(data) {
    if (GsUtils.isNUllOrEmpty(this.ctiWebsocket)) {
      console.error('cti websocket was not create.')
    } else {
      this.ctiWebsocket.send(data)
    }
  }

  createLcdWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.lcdWebsocket)) {
      let apiThis = this
      let config = {}
      config.url = apiThis.wsUrl
      config.user = this.config.username
      config.password = this.config.password
      config.protocols = ['gs-ws-lcd']
      if (GsUtils.isObject(callback)) {
        config.onopen = function (event) {
          if (GsUtils.isFunction(callback.onopen)) {
            callback.onopen(event)
          }
        }

        config.onerror = function (event) {
          apiThis.lcdWebsocket = null

          if (GsUtils.isFunction(callback.onerror)) {
            callback.onerror(event)
          }
        }

        config.onmessage = function (event) {
          if (GsUtils.isFunction(callback.onmessage)) {
            callback.onmessage(event)
          }
        }

        config.onclose = function (event) {
          apiThis.lcdWebsocket = null

          if (GsUtils.isFunction(callback.onclose)) {
            callback.onclose(event)
          }
        }
      }
      this.lcdWebsocket = new WebSocketInstance(config)
    }
    return this.lcdWebsocket
  }

  closeLcdWebsocket() {
    if (!GsUtils.isNUllOrEmpty(this.lcdWebsocket)) {
      this.lcdWebsocket.close()
    }
  }

  sendLcdWebsocketData(data) {
    if (GsUtils.isNUllOrEmpty(this.lcdWebsocket)) {
      console.error('lcd websocket was not create.')
    } else {
      this.lcdWebsocket.send(data)
    }
  }

  createExtWebsocket(callback) {
    if (GsUtils.isNUllOrEmpty(this.extWebsocket)) {
      let apiThis = this
      let config = {}
      config.url = apiThis.wsUrl
      config.user = this.config.username
      config.password = this.config.password
      config.protocols = ['gs-ws-ext']
      if (GsUtils.isObject(callback)) {
        config.onopen = function (event) {
          if (GsUtils.isFunction(callback.onopen)) {
            callback.onopen(event)
          }
        }

        config.onerror = function (event) {
          apiThis.extWebsocket = null

          if (GsUtils.isFunction(callback.onerror)) {
            callback.onerror(event)
          }
        }

        config.onmessage = function (event) {
          if (GsUtils.isFunction(callback.onmessage)) {
            callback.onmessage(event)
          }
        }

        config.onclose = function (event) {
          apiThis.extWebsocket = null

          if (GsUtils.isFunction(callback.onclose)) {
            callback.onclose(event)
          }
        }
      }
      this.extWebsocket = new WebSocketInstance(config)
    }
    return this.extWebsocket
  }

  closeExtWebsocket() {
    if (!GsUtils.isNUllOrEmpty(this.extWebsocket)) {
      this.extWebsocket.close()
    }
  }

  sendExtWebsocketData(data) {
    if (GsUtils.isNUllOrEmpty(this.extWebsocket)) {
      console.error('ext websocket was not create.')
    } else {
      this.extWebsocket.send(data)
    }
  }

  keepAlive() {
    this.gsCgi.startKeepAlive()
  }

  login(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      let apiThis = this
      let accessParam = {}
      accessParam.onreturn = function (ret) {
        if (ret.readyState === 4 && ret.status == 200) {
          let dologinParam = {}
          dologinParam.token = JSON.parse(ret.responseText).body
          dologinParam.onreturn = function (ret) {
            if (ret.readyState === 4 && ret.status == 200) {
              apiThis.gsCgi.startKeepAlive()
            }

            if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
              param.onreturn(ret)
            }
          }
          apiThis.gsCgi.dologin(dologinParam)
        }
      }
      apiThis.gsCgi.access(accessParam)
    }
  }

  avahiStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.avahiStatus(param)
    }
  }

  bsXsiLogin(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.bsXsiLogin(param)
    }
  }

  bsXsiLogout(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.bsXsiLogout(param)
    }
  }

  getCallHistories(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getCallHistories(param)
    }
  }

  databaseClear(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.databaseClear(param)
    }
  }

  databaseDownload(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.databaseDownload(param)
    }
  }

  databaseGetStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.databaseGetStatus(param)
    }
  }

  databaseRecover(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.databaseRecover(param)
    }
  }

  delCallHistories(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delCallHistories(param)
    }
  }

  captureScreen(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.captureScreen(param)
    }
  }

  changeDefaultPwd(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.changeDefaultPwd(param)
    }
  }

  changePwd(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.changePwd(param)
    }
  }

  checkProcess(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.checkProcess(param)
    }
  }

  chooseUserfile(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.chooseUserfile(param)
    }
  }

  configGet(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.configGet(param)
    }
  }

  configUpdate(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.configUpdate(param)
    }
  }

  delContact(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delContact(param)
    }
  }

  delAllContact(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delAllContact(param)
    }
  }

  saveContact(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.saveContact(param)
    }
  }

  del802Ca(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.del802Ca(param)
    }
  }

  del802Cl(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.del802Cl(param)
    }
  }

  delAudMode(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delAudMode(param)
    }
  }

  delAudVol(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delAudVol(param)
    }
  }

  delCa(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delCa(param)
    }
  }

  delCert(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delCert(param)
    }
  }

  delCoredumps(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delCoredumps(param)
    }
  }

  delPcaps(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delPcaps(param)
    }
  }

  delScreens(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delScreens(param)
    }
  }

  delSshkey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delSshkey(param)
    }
  }

  delVPNCa(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delVPNCa(param)
    }
  }

  delVPNCert(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delVPNCert(param)
    }
  }

  delVPNKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delVPNKey(param)
    }
  }

  getDialplan(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getDialplan(param)
    }
  }

  putDialplan(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.putDialplan(param)
    }
  }

  delDialPlan(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delDialPlan(param)
    }
  }

  directLogin(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.directLogin(param)
    }
  }

  dologin(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.dologin(param)
    }
  }

  dologout(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.dologout(param)
    }
  }

  dorefresh(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.dorefresh(param)
    }
  }

  downloadCfg(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.downloadCfg(param)
    }
  }

  downloadPcap(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.downloadPcap(param)
    }
  }

  downloadUserConfig(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.downloadUserConfig(param)
    }
  }

  downloadUserfile(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.downloadUserfile(param)
    }
  }

  forceReboot(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.forceReboot(param)
    }
  }

  getAudioPath(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getAudioPath(param)
    }
  }

  getAudioVolume(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getAudioVolume(param)
    }
  }

  getBarStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getBarStatus(param)
    }
  }

  getCallStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getCallStatus(param)
    }
  }

  getConfStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getConfStatus(param)
    }
  }

  getDatabaseStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getDatabaseStatus(param)
    }
  }

  getDialInNum(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getDialInNum(param)
    }
  }

  getDtmfInNum(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getDtmfInNum(param)
    }
  }

  getDumpList(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getDumpList(param)
    }
  }

  getGuiStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getGuiStatus(param)
    }
  }

  getHookStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getHookStatus(param)
    }
  }

  getIconStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getIconStatus(param)
    }
  }

  getLanguageOrder(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getLanguageOrder(param)
    }
  }

  getLedStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getLedStatus(param)
    }
  }

  getLineStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getLineStatus(param)
    }
  }

  getMessageStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getMessageStatus(param)
    }
  }

  getPacketStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getPacketStatus(param)
    }
  }

  getPcapList(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getPcapList(param)
    }
  }

  getPhoneStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getPhoneStatus(param)
    }
  }

  getPopupContent(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getPopupContent(param)
    }
  }

  getRecordList(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getRecordList(param)
    }
  }

  getRingtoneType(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getRingtoneType(param)
    }
  }

  getRtpStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getRtpStatus(param)
    }
  }

  getScreenData(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getScreenData(param)
    }
  }

  getScreenShot(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getScreenShot(param)
    }
  }

  getSoftKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getSoftKey(param)
    }
  }

  getSystemStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getSystemStatus(param)
    }
  }

  getSystemTime(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getSystemTime(param)
    }
  }

  getUserSpaceInfo(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getUserSpaceInfo(param)
    }
  }

  addGroup(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.addGroup(param)
    }
  }

  editDelGroup(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.editDelGroup(param)
    }
  }

  hideruleCheck(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.hideruleCheck(param)
    }
  }

  hideruleResult(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.hideruleResult(param)
    }
  }

  listAvailKeys(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.listAvailKeys(param)
    }
  }

  listAvailMpks(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.listAvailMpks(param)
    }
  }


  listBsAccounts(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.listBsAccounts(param)
    }
  }

  listCustomKeyModes(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.listCustomKeyModes(param)
    }
  }

  getListCustomKeys(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getListCustomKeys(param)
    }
  }

  postListCustomKeys(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.postListCustomKeys(param)
    }
  }

  makeCall(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.makeCall(param)
    }
  }

  mpkDownload(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.mpkDownload(param)
    }
  }

  mpkSave(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.mpkSave(param)
    }
  }

  pcap(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.pcap(param)
    }
  }

  phonebookDownload(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.phonebookDownload(param)
    }
  }

  phoneOperation(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.phoneOperation(param)
    }
  }

  resetCallScreen(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.resetCallScreen(param)
    }
  }

  resetIdleScreen(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.resetIdleScreen(param)
    }
  }

  backIdle(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.backIdle(param)
    }
  }

  getRingtone(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.getRingtone(param)
    }
  }

  postRingtone(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.postRingtone(param)
    }
  }

  delRingtone(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.delRingtone(param)
    }
  }

  sendInstantMsg(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.sendInstantMsg(param)
    }
  }

  sendExtKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.sendExtKey(param)
    }
  }

  sendKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.sendKey(param)
    }
  }

  setKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.setKey(param)
    }
  }

  setTime(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.setTime(param)
    }
  }

  swapAccount(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.swapAccount(param)
    }
  }

  sysOperation(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.sysOperation(param)
    }
  }

  upload802CA(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.upload802CA(param)
    }
  }

  upload802Cl(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.upload802Cl(param)
    }
  }

  uploadCA(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadCA(param)
    }
  }

  uploadCert(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadCert(param)
    }
  }

  uploadCfg(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadCfg(param)
    }
  }

  uploadPhonebook(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadPhonebook(param)
    }
  }

  uploadSshkey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadSshkey(param)
    }
  }

  uploadUserFile(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadUserFile(param)
    }
  }

  uploadVPNCA(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadVPNCA(param)
    }
  }

  uploadVPNCert(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadVPNCert(param)
    }
  }

  uploadVPNKey(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadVPNKey(param)
    }
  }

  uploadWallpaper(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.uploadWallpaper(param)
    }
  }

  addWifi(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.addWifi(param)
    }
  }

  connectWifi(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.connectWifi(param)
    }
  }

  forgetWifi(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.forgetWifi(param)
    }
  }

  startWifiScan(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.startWifiScan(param)
    }
  }

  stopWifiScan(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.stopWifiScan(param)
    }
  }

  getWifiStatus(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.getWifiStatus(param)
    }
  }

  willLogin(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.willLogin(param)
    }
  }

  sendRequest(param) {
    if (GsUtils.isNUllOrEmpty(this.gsCgi)) {
      console.error('cgi instance is null.')
    } else {
      this.gsCgi.sendReq(param)
    }
  }
}

/**
 * create GsCgi instance
 * @param username web user name
 * @param password web user password.
 * @returns {GsCgi|*}
 * @constructor
 */

class GsCgi {
  constructor(config) {
    if (GsUtils.isObject(config)) {
      this.url = config.url
      this.username = config.username
      this.password = config.password
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      this.url = config.url
      this.username = config.username
      this.password = config.password
    }
  }

  sendReq(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.url)) {
      let xmlhttp = new XMLHttpRequest()
      xmlhttp.onreadystatechange = function () {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(this)
        }
      }

      if (GsUtils.isString(param.method)) {
        xmlhttp.open(param.method, param.url, true)
      } else {
        xmlhttp.open('POST', param.url, true)
      }

      if (GsUtils.isString(param.contentType)) {
        xmlhttp.setRequestHeader('Content-type', param.contentType)
      } else {
        xmlhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
      }

      // TODO: chrou: add GRP request flag
      xmlhttp.setRequestHeader('Request-Server-type', 'X-GRP')

      if (GsUtils.isString(param.data)) {
        xmlhttp.send(param.data)
      } else {
        xmlhttp.send()
      }
    }
  }

  access(param) {
    let cgiThis = this
    let hash = sha256.create()
    hash.update(cgiThis.username)

    let sendParam = {}
    sendParam.url = cgiThis.url + '/cgi-bin/access'
    sendParam.data = 'access=' + hash.hex()
    sendParam.onreturn = function (ret) {
      if (ret.readyState === 4 && ret.status === 200) {
        cgiThis.token = JSON.parse(ret.responseText).body
      }
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  avahiStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_avahi_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  bsXsiLogin(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-bs_xsi_login'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  bsXsiLogout(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-bs_xsi_logout'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getCallHistories(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/callhistories'
    if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      sendParam.data = 'type=' + param.type
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  databaseClear(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-database_clear'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  databaseDownload(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-database_download'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  databaseGetStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-database_get_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  databaseRecover(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-database_recover'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delCallHistories(param) {
    let sendParam = {}
    sendParam.method = 'DELETE'
    sendParam.url = this.url + '/cgi-bin/callhistories'
    if (GsUtils.isObject(param) && GsUtils.isString(param.id)) {
      sendParam.data = 'id=' + param.id
    } else if (GsUtils.isObject(param) && GsUtils.isObject(param.body)) {
      sendParam.data = JSON.stringify(param.body)
      sendParam.contentType = 'application/json'
    } else if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      sendParam.data = 'type=' + param.type
    } else if (GsUtils.isObject(param) && GsUtils.isString(param.all)) {
      sendParam.data = 'all=all'
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  captureScreen(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/api-capture_screen'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  changeDefaultPwd(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.curAdmPwd) &&
        GsUtils.isString(param.newAdmPwd)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-change_default_password'
      sendParam.data = 'curAdmPwd=' + param.curAdmPwd + '&newAdmPwd=' + param.newAdmPwd
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi changeDefaultPwd param error.')
    }
  }

  changePwd(param) {
    if (GsUtils.isObject(param)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-change_password'
      if (GsUtils.isString(param.oldadmin) && GsUtils.isString(param.p2)) {
        sendParam.data = 'oldadmin=' + param.oldadmin + '&P2=' + param.p2
      } else if (GsUtils.isString(param.p196)) {
        sendParam.data = 'P196=' + param.p196
      } else {
        console.error('cgi changePwd param error')
        return
      }
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  checkProcess(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.request)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-check_process_running'
      sendParam.data = 'request=' + param.request
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  chooseUserfile(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.phonebook) &&
        GsUtils.isString(param.callog) && GsUtils.isString(param.config) &&
        GsUtils.isString(param.wallpaper) && GsUtils.isString(param.user_config)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-choose_user_file'
      sendParam.data = 'phonebook=' + param.phonebook +
          '&callog=' + param.callog +
          '&config=' + param.config +
          '&wallpaper=' + param.wallpaper +
          '&user_config=' + param.user_config
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  configGet(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.configs)) {
      let sendParam = {}
      sendParam.method = 'GET'
      sendParam.url = this.url + '/cgi-bin/config_get?pvalues=' + param.configs
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  configUpdate(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.body)) {
      let sendParam = {}
      sendParam.method = 'PUT'
      sendParam.url = this.url + '/cgi-bin/config_update'
      sendParam.data = JSON.stringify(param.body)
      sendParam.contentType = 'application/json'
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  delContact(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.contactId)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-delete_contact_json'
      sendParam.data = 'contactId=' + param.contactId
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  delAllContact(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-delete_all_contact'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  saveContact(param) {
    let keys = []
    if (GsUtils.isObject(param) && GsUtils.isString(param.contactId)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-delete_all_contact'
      let data = 'contactId=' + param.contactId
      if (GsUtils.isString(param.firstName)) {
        data = data + '&firstName=' + param.firstName
      }
      if (GsUtils.isString(param.lastName)) {
        data = data + '&lastName=' + param.lastName
      }
      if (GsUtils.isString(param.favorite)) {
        data = data + '&favorite=' + param.favorite
      }
      if (GsUtils.isString(param.company)) {
        data = data + '&company=' + param.company
      }
      if (GsUtils.isString(param.department)) {
        data = data + '&department=' + param.department
      }
      if (GsUtils.isString(param.job)) {
        data = data + '&job=' + param.job
      }
      if (GsUtils.isString(param.jobTitle)) {
        data = data + '&jobTitle=' + param.jobTitle
      }
      if (GsUtils.isString(param.workNum)) {
        data = data + '&workNum=' + param.workNum
      }
      if (GsUtils.isString(param.homeNum)) {
        data = data + '&homeNum=' + param.homeNum
      }
      if (GsUtils.isString(param.cellNum)) {
        data = data + '&cellNum=' + param.cellNum
      }
      if (GsUtils.isString(param.account)) {
        data = data + '&account=' + param.account
      }
      if (GsUtils.isString(param.groups)) {
        data = data + '&groups=' + param.groups
      }
      if (GsUtils.isString(param.ringtone)) {
        data = data + '&ringtone=' + param.ringtone
      }
      if (GsUtils.isString(param.primary)) {
        data = data + '&primary=' + param.primary
      }
      if (GsUtils.isString(param.image)) {
        data = data + '&image=' + param.image
      }
      if (GsUtils.isString(param.customLabelCount)) {
        data = data + '&customLabelCount=' + param.customLabelCount
      }
      if (GsUtils.isString(param.stamp)) {
        data = data + '&stamp=' + param.stamp
      }

      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  del802Ca(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_802ca'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  del802Cl(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_802cl'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delAudMode(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_aud_mode'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delAudVol(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_aud_vol'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delCa(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.data)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/delete_CA'
      sendParam.data = JSON.stringify(param.data)
      sendParam.contentType = 'application/json'
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  delCert(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_cert'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delCoredumps(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-delete_core_dumps'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delPcaps(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-delete_pcap_list'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delScreens(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-delete_screens'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delSshkey(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_sshkey'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delVPNCa(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_vpnca'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delVPNCert(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_vpncert'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  delVPNKey(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/delete_vpnkey'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getDialplan(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/dialplan'
    if (GsUtils.isObject(param) && GsUtils.isString(param.acctid)) {
      sendParam.url += '?acctid=' + param.acctid
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  putDialplan(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.data)) {
      let sendParam = {}
      sendParam.method = 'PUT'
      sendParam.url = this.url + '/cgi-bin/dialplan'
      sendParam.data = JSON.stringify(param.data)
      sendParam.contentType = 'application/json'
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  delDialPlan(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.id)) {
      let sendParam = {}
      sendParam.method = 'DELETE'
      sendParam.url = this.url + '/cgi-bin/dialplan'
      sendParam.data = 'id=' + param.id
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }
    }
  }

  directLogin(param) {
    // TODO:
  }

  dologin(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.token)) {
      let cgiThis = this
      let hash = sha256.create()
      hash.update(cgiThis.password + param.token)


      let sendParam = {}
      sendParam.url = cgiThis.url + '/cgi-bin/dologin'
      sendParam.data = 'username=' + cgiThis.username + '&password=' + hash.hex()
      sendParam.onreturn = function (ret) {
        if (ret.readyState === 4 && ret.status === 200) {
          let resp = JSON.parse(ret.responseText)
          if (resp.response === 'success') {
            console.log('login success.')
            cgiThis.sid = resp.body.sid
            document.cookie = 'sid=' + cgiThis.sid
            localStorage.setItem('sid', cgiThis.sid)
          }
        }
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi dologin param error.')
    }
  }

  dologout(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/dologout'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  dorefresh(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/dorefresh'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  downloadCfg(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      let sendParam = {}
      sendParam.method = 'GET'
      sendParam.url = this.url + '/cgi-bin/download_cfg?type=' + param.type
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  downloadPcap(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/api-download_pcap'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  downloadUserConfig(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/download_user_config'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  downloadUserfile(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/api-download_user_file'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  forceReboot(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-forceReboot'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getAudioPath(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_audiopath'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getAudioVolume(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_audiovolume'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getBarStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_barstatus'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getCallStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_call_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getConfStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_conf_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getDatabaseStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_database_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getDialInNum(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_dial_input_number'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getDtmfInNum(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_dtmf_input_number'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getDumpList(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_dump_list'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getGuiStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_gui_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getHookStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_hookstatus'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getIconStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_iconstatus'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getLanguageOrder(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_language_order'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getLedStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_ledstatus'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getLineStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_line_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getMessageStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_message_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getPacketStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_packet_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getPcapList(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_pcap_list'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getPhoneStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_phone_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getPopupContent(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_popup_content'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getRecordList(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_record_list'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getRingtoneType(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_ringtone_type'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getRtpStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_rtp_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getScreenData(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_screen_data'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getScreenShot(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_screenshot'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getSoftKey(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_softkey'
    if (GsUtils.isObject(param) && GsUtils.isString(param.isShow)) {
      sendParam.data = 'isShow=' + param.isShow
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getSystemStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_system_status'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getSystemTime(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_time'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getUserSpaceInfo(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-get_user_space_info'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  addGroup(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.groupName) &&
        GsUtils.isString(param.ringtone)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-add_group_json'
      let data = 'groupName=' + param.groupName
      data = data + '&ringtone=' + param.ringtone
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  editDelGroup(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.groupId) &&
        GsUtils.isString(param.groupName) && GsUtils.isString(param.ringtone) &&
        GsUtils.isString(param.account)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-edit_delete_group_json'
      let data = 'groupId=' + param.groupId
      data = data + '&groupName=' + param.groupName
      data = data + '&ringtone=' + param.ringtone
      data = data + '&account=' + param.account
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  hideruleCheck(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.rule)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-hide_rule_check'
      sendParam.data = 'rule=' + param.rule
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  hideruleResult(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.rule) &&
        GsUtils.isString(param.number)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-hide_rule_result'
      let data = 'rule=' + param.rule
      data = data + '&number=' + param.number
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  listAvailKeys(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-list_avail_keys'
      sendParam.data = 'type=' + param.type
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  listAvailMpks(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-list_avail_mpks'
      sendParam.data = 'type=' + param.type
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  listBsAccounts(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-list_bs_accounts'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }


  listCustomKeyModes(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.type)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-list_custom_key_modes'
      sendParam.data = 'type=' + param.type
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  getListCustomKeys(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    sendParam.url = this.url + '/cgi-bin/api-list_custom_keys'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  postListCustomKeys(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.list)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-list_custom_keys'
      sendParam.data = 'list=' + param.list
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  makeCall(param) {
    if (GsUtils.isObject(param)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-make_call'
      let data = 'phonenumber=' + param.phonenumber
      data = data + '&account=' + param.account
      if (GsUtils.isString(param.display)) {
        data = data + '&display=' + param.display
      }
      if (GsUtils.isString(param.password)) {
        data = data + '&password=' + param.password
      }
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  mpkDownload(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-mpk_download'
    let data = ''
    if (GsUtils.isObject(param)) {
      if (GsUtils.isString(param.type)) {
        if (0 === data.length) {
          data = data + 'type=' + param.type
        } else {
          data = data + '&type=' + param.type
        }
      }

      if (GsUtils.isString(param.page)) {
        if (0 === data.length) {
          data = data + 'page=' + param.page
        } else {
          data = data + '&page=' + param.page
        }
      }

      if (GsUtils.isString(param.status)) {
        if (0 === data.length) {
          data = data + 'status=' + param.status
        } else {
          data = data + '&status=' + param.status
        }
      }
    }
    sendParam.data = data
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  mpkSave(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.mpks)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-save_mpk'
      sendParam.contentType = 'application/json'
      sendParam.data = JSON.stringify(param.mpks)
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  pcap(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-mpk_download'
    let data = ''
    if (GsUtils.isObject(param)) {
      if (GsUtils.isString(param.start)) {
        if (0 === data.length) {
          data = data + 'start=' + param.start
        } else {
          data = data + '&start=' + param.start
        }
      }

      if (GsUtils.isString(param.method)) {
        if (0 === data.length) {
          data = data + 'method=' + param.method
        } else {
          data = data + '&method=' + param.method
        }
      }

      if (GsUtils.isString(param.name)) {
        if (0 === data.length) {
          data = data + 'name=' + param.name
        } else {
          data = data + '&name=' + param.name
        }
      }

      if (GsUtils.isString(param.rtp)) {
        if (0 === data.length) {
          data = data + 'rtp=' + param.rtp
        } else {
          data = data + '&rtp=' + param.rtp
        }
      }

      if (GsUtils.isString(param.ssl)) {
        if (0 === data.length) {
          data = data + 'ssl=' + param.ssl
        } else {
          data = data + '&ssl=' + param.ssl
        }
      }
    }
    sendParam.data = data
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  phonebookDownload(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-phonebook_download_json'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  phoneOperation(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.cmd)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-phone_operation'
      let data = 'cmd=' + param.cmd
      if (GsUtils.isString(param.arg)) {
        data = data + '&arg=' + param.arg
      }
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    }
  }

  resetCallScreen(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-reset_call_screen'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  resetIdleScreen(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-reset_idle_screen'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  backIdle(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-back_idle'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getRingtone(param) {
    let sendParam = {}
    sendParam.method = 'GET'
    let url = this.url + '/cgi-bin/ringtone'
    let data = ''
    if (GsUtils.isObject(param)) {
      if (GsUtils.isString(param.id)) {
        if (0 === data.length) {
          data = data + 'id=' + param.id
        } else {
          data = data + '&id=' + param.id
        }
      }

      if (GsUtils.isString(param.filename)) {
        if (0 === data.length) {
          data = data + 'filename=' + param.filename
        } else {
          data = data + '&filename=' + param.filename
        }
      }
    }
    if (0 === data.length) {
      sendParam.url = url
    } else {
      sendParam.url = url + '?' + data
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  postRingtone(param) {
    // TODO:
  }

  delRingtone(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.id)) {
      let sendParam = {}
      sendParam.method = 'DELETE'
      sendParam.url = this.url + '/cgi-bin/ringtone'
      sendParam.data = 'id=' + param.id
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi delRingtone param error')
    }
  }

  sendInstantMsg(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.account) &&
        GsUtils.isString(param.number) && GsUtils.isString(param.message)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-send_instant_message'
      let data = 'account=' + param.account
      data = data + 'number=' + param.number
      data = data + 'message=' + param.message
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi sendInstantMsg param error')
    }
  }

  sendExtKey(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.key)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-send_ext_key'
      let data = 'key=' + param.key
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi sendExtKey param error')
    }
  }

  sendKey(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.keys)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-send_key'
      sendParam.data = 'keys=' + param.keys
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi sendkey param error')
    }
  }

  setKey(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.key)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-set_key'
      let data = 'key=' + param.key
      if (GsUtils.isString(param.press)) {
        data = data + '&press=' + param.press
      }
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi setKey param error')
    }
  }

  setTime(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-set_time'
    let data = ''
    if (GsUtils.isObject(param)) {
      if (GsUtils.isString(param.date)) {
        if (0 === data.length) {
          data = data + 'date=' + param.date
        } else {
          data = data + '&date=' + param.date
        }
      }

      if (GsUtils.isString(param.dateStr)) {
        if (0 === data.length) {
          data = data + 'dateStr=' + param.dateStr
        } else {
          data = data + '&dateStr=' + param.dateStr
        }
      }

      if (GsUtils.isString(param.dateTime)) {
        if (0 === data.length) {
          data = data + 'dateTime=' + param.dateTime
        } else {
          data = data + '&dateTime=' + param.dateTime
        }
      }
    }
    sendParam.data = data
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  swapAccount(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.account1) &&
        GsUtils.isString(param.account2)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-swap_account'
      let data = 'account1=' + param.account1
      data = data + '&account2=' + param.account2
      sendParam.data = data
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi swapAccount param error')
    }
  }

  sysOperation(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.request)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-sys_operation'
      sendParam.data = 'request=' + param.request
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi swapAccount param error')
    }
  }

  upload802CA(param) {
    // TODO:
  }

  upload802Cl(param) {
    // TODO:
  }

  uploadCA(param) {
    // TODO:
  }

  uploadCert(param) {
    // TODO:
  }

  uploadCfg(param) {
    // TODO:
  }

  uploadPhonebook(param) {
    // TODO:
  }

  uploadSshkey(param) {
    // TODO:
  }

  uploadUserFile(param) {
    // TODO:
  }

  uploadVPNCA(param) {
    // TODO:
  }

  uploadVPNCert(param) {
    // TODO:
  }

  uploadVPNKey(param) {
    // TODO:
  }

  uploadWallpaper(param) {
    // TODO:
  }

  addWifi(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.data)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-wifi_add'
      sendParam.data = JSON.stringify(param.data)
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi addWifi param error')
    }
  }

  connectWifi(param) {
    if (GsUtils.isObject(param) && GsUtils.isObject(param.data)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-wifi_connect'
      sendParam.data = JSON.stringify(param.data)
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi connectWifi param error')
    }
  }

  forgetWifi(param) {
    if (GsUtils.isObject(param) && GsUtils.isString(param.ssid)) {
      let sendParam = {}
      sendParam.url = this.url + '/cgi-bin/api-wifi_forget'
      sendParam.data = 'ssid=' + param.ssid
      sendParam.onreturn = function (ret) {
        if (GsUtils.isFunction(param.onreturn)) {
          param.onreturn(ret)
        }
      }

      this.sendReq(sendParam)
    } else {
      console.error('cgi forgetWifi param error')
    }
  }

  startWifiScan(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-wifi_scan_start'
    if (GsUtils.isObject(param) && GsUtils.isString(param.auto)) {
      sendParam.data = 'auto=' + param.auto
    }
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  stopWifiScan(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-wifi_scan_stop'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  getWifiStatus(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-wifi_status_get'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }

  willLogin(param) {
    let sendParam = {}
    sendParam.url = this.url + '/cgi-bin/api-will_login'
    sendParam.onreturn = function (ret) {
      if (GsUtils.isObject(param) && GsUtils.isFunction(param.onreturn)) {
        param.onreturn(ret)
      }
    }

    this.sendReq(sendParam)
  }


  startKeepAlive() {
    let cgiThis = this
    cgiThis.keepAliveInterval = setInterval(function () {
      cgiThis.willLogin()
    }, 5000)
  }

  stopKeepAlive() {
    if (this.keepAliveInterval) {
      clearInterval(this.keepAliveInterval)
      this.keepAliveInterval = null
    }
  }
}

/**
 * utils class.
 */

class GsUtils {
  static isNUllOrEmpty(str) {
    if (typeof (str) === 'undefined' || str === null || str === '') {
      return true
    } else {
      return false
    }
  }

  static isFunction(func) {
    if (typeof (func) === 'function') {
      return true
    } else {
      return false
    }
  }

  static isString(str) {
    if (typeof (str) === 'string' && str !== '') {
      return true
    } else {
      return false
    }
  }

  static isObject(obj) {
    if (typeof (obj) === 'object' && obj !== null) {
      return true
    } else {
      return false
    }
  }
}

/**
 * create websocket instance
 * @param url connection url.
 * @param protocols sub protocols.
 * @returns {WebSocket|*}
 * @constructor
 */

class WebSocketInstance {
  constructor(config) {
    if (GsUtils.isObject(config)) {
      this.config = config
      this.ws = this.createWebSocket()
    } else {
      this.ws = null
    }
  }

  updateCfg(config) {
    if (GsUtils.isObject(config)) {
      this.config.user = config.username
      this.config.password = config.password
    }
  }

  createWebSocket() {
    let wsThis = this
    if (GsUtils.isObject(wsThis.config)) {
      if (GsUtils.isNUllOrEmpty(wsThis.config.url)) {
        throw new Error('ERR_INVALID_PARAMETER_VALUE: "' + url + '" is not valid as webSocket url value')
      }

      let ws = new WebSocket(wsThis.config.url, wsThis.config.protocols)

      window.onunload = window.onbeforeunload = function () {
        let sendData = JSON.stringify({
          'closeWs': true
        })
        ws.send(sendData)
      }

      ws.onopen = function (event) {
        let sendData = JSON.stringify({
          'challenge': true
        })

        ws.send(sendData)

        if (GsUtils.isFunction(wsThis.config.onopen)) {
          wsThis.config.onopen(event)
        }
      }

      ws.onerror = function (event) {
        if (GsUtils.isFunction(wsThis.config.onerror)) {
          wsThis.config.onerror(event)
        }
      }

      ws.onmessage = function (event) {
        if (typeof (event.data) === 'string' && event.data === '\r\n\r\n') {
          ws.keepAliveWithoutResp = 0
        } else if (event.data) {
          let retData = JSON.parse(event.data)
          if (retData.challenge) {
            let hash = sha256.create()
            hash.update(wsThis.config.password + retData.challenge)

            let sendData = JSON.stringify({
              'user': wsThis.config.user,
              'token': hash.hex()
            })

            ws.send(sendData)
            ws.keepAliveWithoutResp = 0
            if (!ws.keepAliveInterval) {
              ws.keepAlive()
            }
          } else if (GsUtils.isFunction(wsThis.config.onmessage)) {
            wsThis.config.onmessage(event)
          }
        }
      }

      ws.onclose = function (event) {
        if (ws.keepAliveInterval) {
          clearInterval(ws.keepAliveInterval)
          ws.keepAliveInterval = null
        }

        if (GsUtils.isFunction(wsThis.config.onclose)) {
          wsThis.config.onclose(event)
        }
      }

      ws.keepAlive = function () {
        ws.keepAliveInterval = setInterval(function () {
          if (ws.keepAliveWithoutResp >= 5) {
            ws.close()
            return
          } else {
            let message = '\r\n'
            ws.send(message)
            this.keepAliveWithoutResp += 1
          }
        }, 5000)
      }

      return ws
    } else {
      return null
    }
  }

  close() {
    if (GsUtils.isNUllOrEmpty(this.ws)) {
      console.error('the websocket is null')
    } else {
      this.ws.close()
    }
  }

  send(data) {
    if (GsUtils.isNUllOrEmpty(this.ws)) {
      console.error('the websocket is null')
    } else {
      this.ws.send(data)
    }
  }
}

/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
!function(){"use strict";function t(t,i){i?(d[0]=d[16]=d[1]=d[2]=d[3]=d[4]=d[5]=d[6]=d[7]=d[8]=d[9]=d[10]=d[11]=d[12]=d[13]=d[14]=d[15]=0,this.blocks=d):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=t}function i(i,r,s){var e,n=typeof i;if("string"===n){var o,a=[],u=i.length,c=0;for(e=0;e<u;++e)(o=i.charCodeAt(e))<128?a[c++]=o:o<2048?(a[c++]=192|o>>6,a[c++]=128|63&o):o<55296||o>=57344?(a[c++]=224|o>>12,a[c++]=128|o>>6&63,a[c++]=128|63&o):(o=65536+((1023&o)<<10|1023&i.charCodeAt(++e)),a[c++]=240|o>>18,a[c++]=128|o>>12&63,a[c++]=128|o>>6&63,a[c++]=128|63&o);i=a}else{if("object"!==n)throw new Error(h);if(null===i)throw new Error(h);if(f&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!(Array.isArray(i)||f&&ArrayBuffer.isView(i)))throw new Error(h)}i.length>64&&(i=new t(r,!0).update(i).array());var y=[],p=[];for(e=0;e<64;++e){var l=i[e]||0;y[e]=92^l,p[e]=54^l}t.call(this,r,s),this.update(p),this.oKeyPad=y,this.inner=!0,this.sharedMemory=s}var h="input is invalid type",r="object"==typeof window,s=r?window:{};s.JS_SHA256_NO_WINDOW&&(r=!1);var e=!r&&"object"==typeof self,n=!s.JS_SHA256_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;n?s=global:e&&(s=self);var o=!s.JS_SHA256_NO_COMMON_JS&&"object"==typeof module&&module.exports,a="function"==typeof define&&define.amd,f=!s.JS_SHA256_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,u="0123456789abcdef".split(""),c=[-2147483648,8388608,32768,128],y=[24,16,8,0],p=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],l=["hex","array","digest","arrayBuffer"],d=[];!s.JS_SHA256_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!f||!s.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});var A=function(i,h){return function(r){return new t(h,!0).update(r)[i]()}},w=function(i){var h=A("hex",i);n&&(h=b(h,i)),h.create=function(){return new t(i)},h.update=function(t){return h.create().update(t)};for(var r=0;r<l.length;++r){var s=l[r];h[s]=A(s,i)}return h},b=function(t,i){var r=eval("require('crypto')"),s=eval("require('buffer').Buffer"),e=i?"sha224":"sha256",n=function(i){if("string"==typeof i)return r.createHash(e).update(i,"utf8").digest("hex");if(null===i||void 0===i)throw new Error(h);return i.constructor===ArrayBuffer&&(i=new Uint8Array(i)),Array.isArray(i)||ArrayBuffer.isView(i)||i.constructor===s?r.createHash(e).update(new s(i)).digest("hex"):t(i)};return n},v=function(t,h){return function(r,s){return new i(r,h,!0).update(s)[t]()}},_=function(t){var h=v("hex",t);h.create=function(h){return new i(h,t)},h.update=function(t,i){return h.create(t).update(i)};for(var r=0;r<l.length;++r){var s=l[r];h[s]=v(s,t)}return h};t.prototype.update=function(t){if(!this.finalized){var i,r=typeof t;if("string"!==r){if("object"!==r)throw new Error(h);if(null===t)throw new Error(h);if(f&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||f&&ArrayBuffer.isView(t)))throw new Error(h);i=!0}for(var s,e,n=0,o=t.length,a=this.blocks;n<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),i)for(e=this.start;n<o&&e<64;++n)a[e>>2]|=t[n]<<y[3&e++];else for(e=this.start;n<o&&e<64;++n)(s=t.charCodeAt(n))<128?a[e>>2]|=s<<y[3&e++]:s<2048?(a[e>>2]|=(192|s>>6)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]):s<55296||s>=57344?(a[e>>2]|=(224|s>>12)<<y[3&e++],a[e>>2]|=(128|s>>6&63)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]):(s=65536+((1023&s)<<10|1023&t.charCodeAt(++n)),a[e>>2]|=(240|s>>18)<<y[3&e++],a[e>>2]|=(128|s>>12&63)<<y[3&e++],a[e>>2]|=(128|s>>6&63)<<y[3&e++],a[e>>2]|=(128|63&s)<<y[3&e++]);this.lastByteIndex=e,this.bytes+=e-this.start,e>=64?(this.block=a[16],this.start=e-64,this.hash(),this.hashed=!0):this.start=e}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},t.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,i=this.lastByteIndex;t[16]=this.block,t[i>>2]|=c[3&i],this.block=t[16],i>=56&&(this.hashed||this.hash(),t[0]=this.block,t[16]=t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=t[7]=t[8]=t[9]=t[10]=t[11]=t[12]=t[13]=t[14]=t[15]=0),t[14]=this.hBytes<<3|this.bytes>>>29,t[15]=this.bytes<<3,this.hash()}},t.prototype.hash=function(){var t,i,h,r,s,e,n,o,a,f=this.h0,u=this.h1,c=this.h2,y=this.h3,l=this.h4,d=this.h5,A=this.h6,w=this.h7,b=this.blocks;for(t=16;t<64;++t)i=((s=b[t-15])>>>7|s<<25)^(s>>>18|s<<14)^s>>>3,h=((s=b[t-2])>>>17|s<<15)^(s>>>19|s<<13)^s>>>10,b[t]=b[t-16]+i+b[t-7]+h<<0;for(a=u&c,t=0;t<64;t+=4)this.first?(this.is224?(e=300032,w=(s=b[0]-1413257819)-150054599<<0,y=s+24177077<<0):(e=704751109,w=(s=b[0]-210244248)-1521486534<<0,y=s+143694565<<0),this.first=!1):(i=(f>>>2|f<<30)^(f>>>13|f<<19)^(f>>>22|f<<10),r=(e=f&u)^f&c^a,w=y+(s=w+(h=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+(l&d^~l&A)+p[t]+b[t])<<0,y=s+(i+r)<<0),i=(y>>>2|y<<30)^(y>>>13|y<<19)^(y>>>22|y<<10),r=(n=y&f)^y&u^e,A=c+(s=A+(h=(w>>>6|w<<26)^(w>>>11|w<<21)^(w>>>25|w<<7))+(w&l^~w&d)+p[t+1]+b[t+1])<<0,i=((c=s+(i+r)<<0)>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10),r=(o=c&y)^c&f^n,d=u+(s=d+(h=(A>>>6|A<<26)^(A>>>11|A<<21)^(A>>>25|A<<7))+(A&w^~A&l)+p[t+2]+b[t+2])<<0,i=((u=s+(i+r)<<0)>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10),r=(a=u&c)^u&y^o,l=f+(s=l+(h=(d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7))+(d&A^~d&w)+p[t+3]+b[t+3])<<0,f=s+(i+r)<<0;this.h0=this.h0+f<<0,this.h1=this.h1+u<<0,this.h2=this.h2+c<<0,this.h3=this.h3+y<<0,this.h4=this.h4+l<<0,this.h5=this.h5+d<<0,this.h6=this.h6+A<<0,this.h7=this.h7+w<<0},t.prototype.hex=function(){this.finalize();var t=this.h0,i=this.h1,h=this.h2,r=this.h3,s=this.h4,e=this.h5,n=this.h6,o=this.h7,a=u[t>>28&15]+u[t>>24&15]+u[t>>20&15]+u[t>>16&15]+u[t>>12&15]+u[t>>8&15]+u[t>>4&15]+u[15&t]+u[i>>28&15]+u[i>>24&15]+u[i>>20&15]+u[i>>16&15]+u[i>>12&15]+u[i>>8&15]+u[i>>4&15]+u[15&i]+u[h>>28&15]+u[h>>24&15]+u[h>>20&15]+u[h>>16&15]+u[h>>12&15]+u[h>>8&15]+u[h>>4&15]+u[15&h]+u[r>>28&15]+u[r>>24&15]+u[r>>20&15]+u[r>>16&15]+u[r>>12&15]+u[r>>8&15]+u[r>>4&15]+u[15&r]+u[s>>28&15]+u[s>>24&15]+u[s>>20&15]+u[s>>16&15]+u[s>>12&15]+u[s>>8&15]+u[s>>4&15]+u[15&s]+u[e>>28&15]+u[e>>24&15]+u[e>>20&15]+u[e>>16&15]+u[e>>12&15]+u[e>>8&15]+u[e>>4&15]+u[15&e]+u[n>>28&15]+u[n>>24&15]+u[n>>20&15]+u[n>>16&15]+u[n>>12&15]+u[n>>8&15]+u[n>>4&15]+u[15&n];return this.is224||(a+=u[o>>28&15]+u[o>>24&15]+u[o>>20&15]+u[o>>16&15]+u[o>>12&15]+u[o>>8&15]+u[o>>4&15]+u[15&o]),a},t.prototype.toString=t.prototype.hex,t.prototype.digest=function(){this.finalize();var t=this.h0,i=this.h1,h=this.h2,r=this.h3,s=this.h4,e=this.h5,n=this.h6,o=this.h7,a=[t>>24&255,t>>16&255,t>>8&255,255&t,i>>24&255,i>>16&255,i>>8&255,255&i,h>>24&255,h>>16&255,h>>8&255,255&h,r>>24&255,r>>16&255,r>>8&255,255&r,s>>24&255,s>>16&255,s>>8&255,255&s,e>>24&255,e>>16&255,e>>8&255,255&e,n>>24&255,n>>16&255,n>>8&255,255&n];return this.is224||a.push(o>>24&255,o>>16&255,o>>8&255,255&o),a},t.prototype.array=t.prototype.digest,t.prototype.arrayBuffer=function(){this.finalize();var t=new ArrayBuffer(this.is224?28:32),i=new DataView(t);return i.setUint32(0,this.h0),i.setUint32(4,this.h1),i.setUint32(8,this.h2),i.setUint32(12,this.h3),i.setUint32(16,this.h4),i.setUint32(20,this.h5),i.setUint32(24,this.h6),this.is224||i.setUint32(28,this.h7),t},i.prototype=new t,i.prototype.finalize=function(){if(t.prototype.finalize.call(this),this.inner){this.inner=!1;var i=this.array();t.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(i),t.prototype.finalize.call(this)}};var B=w();B.sha256=B,B.sha224=w(!0),B.sha256.hmac=_(),B.sha224.hmac=_(!0),o?module.exports=B:(s.sha256=B.sha256,s.sha224=B.sha224,a&&define(function(){return B}))}();
